name: Build and Package Extensions

on:
  pull_request:
  workflow_dispatch:

jobs:
  build-zips:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: |
          set -e
          corepack enable
        shell: bash

      - name: Setup Node.js with pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          set -e
          pnpm install --frozen-lockfile
        shell: bash

      - name: Build and Package Extensions
        run: |
          set -e
          pnpm zip:all
        shell: bash

      - name: Extract name and version from package.json
        id: extract_pkg
        shell: node
        run: |
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf-8'));
          if (!pkg.name || !pkg.version) {
            console.error('package.json missing name or version');
            process.exit(1);
          }
          console.log(`::set-output name=name::${pkg.name}`);
          console.log(`::set-output name=version::${pkg.version}`);

      - name: Debug - List output directory and subfolders
        run: |
          echo "=== Contents of .output directory ==="
          ls -la .output || (echo ".output directory not found" && exit 1)
          echo "=== Contents of chrome-mv3 directory ==="
          ls -la .output/chrome-mv3 || (echo "chrome-mv3 directory not found" && exit 1)
          echo "=== Contents of firefox-mv2 directory ==="
          ls -la .output/firefox-mv2 || (echo "firefox-mv2 directory not found" && exit 1)
        shell: bash

      - name: Prepare artifacts directory with dynamic names
        run: |
          set -e
          ARTIFACT_BASE="${{ steps.extract_pkg.outputs.name }}-${{ steps.extract_pkg.outputs.version }}"
          mkdir -p artifacts
          cp -r .output/chrome-mv3 "artifacts/${ARTIFACT_BASE}-chrome-mv3"
          cp -r .output/firefox-mv2 "artifacts/${ARTIFACT_BASE}-firefox-mv2"
          echo "Artifacts prepared:"
          ls -la artifacts
        shell: bash

      - name: Upload chrome-mv3 artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.extract_pkg.outputs.name }}-${{ steps.extract_pkg.outputs.version }}-chrome-mv3
          path: artifacts/${{ steps.extract_pkg.outputs.name }}-${{ steps.extract_pkg.outputs.version }}-chrome-mv3

      - name: Upload firefox-mv2 artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.extract_pkg.outputs.name }}-${{ steps.extract_pkg.outputs.version }}-firefox-mv2
          path: artifacts/${{ steps.extract_pkg.outputs.name }}-${{ steps.extract_pkg.outputs.version }}-firefox-mv2

  report:
    needs: build-zips
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Report failure
        run: |
          echo "‚ùå Build or packaging failed."
          echo "GITHUB_RUN_ID=${{ github.run_id }}"
          echo "GITHUB_WORKFLOW=${{ github.workflow }}"
          echo "GITHUB_JOB=${{ github.job }}"
          echo "GITHUB_REF=${{ github.ref }}"
          echo "GITHUB_SHA=${{ github.sha }}"
          echo "GITHUB_EVENT_NAME=${{ github.event_name }}"
          echo "Full github context:"
          echo "${{ toJSON(github) }}"
